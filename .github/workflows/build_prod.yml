name: build-prod

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - version

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code Now Code
        uses: actions/checkout@v3
        with:
          ref: 'main'

      - name: Checkout code front end
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.REPOSITORY_FRONT }}
          path: './msaber-front'
          ref: 'main'
          token: ${{ secrets.PERSON_ACCESS_TOKEN }}
      
      - name: Checkout code back end
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.REPOSITORY_BACK }}
          path: './msaber-back'
          ref: 'main'
          token: ${{ secrets.PERSON_ACCESS_TOKEN }}

      - name: 修改非正式版本号
        run: |
          echo "DEV_$(date -d '+8 hours' +'%Y%m%d%H%M')" > version
      
      - name: Get version from file
        id: get_version
        run: |
          echo "version=$(cat version)" >> $GITHUB_ENV
      
      - name: Update Server Key
        run: |
          # 发送 POST 请求获取响应
          response=$(curl --location --request POST "${{ secrets.API_URL }}" \
          --header "Authorization: ${{ secrets.AUTHORIZATION }}" \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "version": "${{ env.version }}"
          }')

          # 提取 publickKey
          publicKey=$(echo $response | jq -r '.publickKey')

          # 检查 publickKey 是否为空
          if [ -z "$publicKey" ] || [ "$publicKey" == "null" ]; then
            echo "Error: publicKey is null or empty"
            exit 1
          fi

          # 将 publickKey 写入文件
          echo "$publicKey" > msaber-back/internal/svc/cert/server.key


      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies @angular/cli
        run: npm install -g @angular/cli

      - name: Build Frontend
        run: |
          cd msaber-front
          npm install
          npm run build
          rm -rf ../msaber-back/front
          cp -r dist/MediaSaber/browser ../msaber-back/front

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.1'

      - name: Build for amd64
        run: |
          cd msaber-back
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a --trimpath -ldflags="-X 'github.com/xylplm/media-saber-back-end/internal/svc.version=${{ env.version }}' -X 'github.com/xylplm/media-saber-back-end/internal/svc.sqlDebug=false' -X 'msaber-back/internal/config.Version=${{ env.version }}' -X 'msaber-back/internal/config.BuildDate=$(date)'" -o dist/linux/amd64/mediaSaber .

      - name: 检查后端构建后文件
        run: |
          ls -al msaber-back/dist/linux/amd64/mediaSaber

      - name: Build for arm64
        run: |
          cd msaber-back
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -a --trimpath -ldflags="-X 'github.com/xylplm/media-saber-back-end/internal/svc.version=${{ env.version }}' -X 'github.com/xylplm/media-saber-back-end/internal/svc.sqlDebug=false' -X 'msaber-back/internal/config.Version=${{ env.version }}' -X 'msaber-back/internal/config.BuildDate=$(date)'" -o dist/linux/arm64/mediaSaber .

      - name: 检查构建后文件 前端 后端文件是否齐全
        run: |
          ls -al ./msaber-back/dist/linux/amd64
          ls -al ./msaber-back/dist/linux/arm64

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/media-saber:go-dev
          push: true
