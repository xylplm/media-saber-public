name: build-dev-only-docker

on:
  workflow_dispatch:

jobs:
  generate-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: 创建版本号
        id: set_version
        run: |
          echo "DEV_$(date -d '+8 hours' +'%Y%m%d%H%M')" > version_number
          echo "version=$(cat version_number)" >> $GITHUB_ENV

      - name: Upload Version Artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version_number
  build-frontend:
    runs-on: ubuntu-latest
    needs: [ generate-version ]
    steps:
      - name: Checkout code Now Code
        uses: actions/checkout@v4
        with:
          ref: 'main'
      - name: Checkout code front end
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.REPOSITORY_FRONT }}
          path: './msaber-front'
          ref: 'main'
          token: ${{ secrets.PERSON_ACCESS_TOKEN }}

      - name: Download Version Artifact
        uses: actions/download-artifact@v4
        with:
          name: version
  
      - name: Read Version
        id: read_version
        run: echo "version=$(cat version_number)" >> $GITHUB_ENV

      - name: Update front version in version.ts
        run: |
          echo "export const version = '${{ env.version }}';" > msaber-front/version.ts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: msaber-front/package-lock.json
      - name: Build Frontend
        run: |
          cd msaber-front
          npm ci
          npm run build

      - name: Upload Frontend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact-front-dist
          path: msaber-front/dist/MediaSaber/browser

  build-backend:
    runs-on: ubuntu-latest
    needs: [ generate-version ]
    strategy:
      matrix:
        arch: [ amd64, arm64 ]
    steps:

      - name: Checkout code back end
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.REPOSITORY_BACK }}
          path: './msaber-back'
          ref: 'main'
          token: ${{ secrets.PERSON_ACCESS_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./msaber-back/go.mod
          cache-dependency-path: ./msaber-back/go.sum

      - name: Cache Go Build Cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build
          key: go-build-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-build-${{ runner.os }}-${{ matrix.arch }}-
            go-build-${{ runner.os }}-

      - name: Download Version Artifact
        uses: actions/download-artifact@v4
        with:
          name: version

      - name: Read Version
        id: read_version
        run: echo "version=$(cat version_number)" >> $GITHUB_ENV

      - name: Download dependencies
        run: |
          cd msaber-back
          go mod download

      - name: Build for ${{ matrix.arch }}
        run: |
          cd msaber-back
          CGO_ENABLED=0 GOOS=linux GOARCH=${{ matrix.arch }} go build -a --trimpath -ldflags="-X 'github.com/xylplm/media-saber-back-end/internal/svc.sqlDebug=false' -X 'msaber-back/internal/config.Version=${{ env.version }}' -X 'msaber-back/internal/config.BuildDate=$(date)'" -o dist/linux/${{ matrix.arch }}/mediaSaber .

      - name: Prepare Files
        run: |
          mkdir -p msaber-back-${{ matrix.arch }}
          mkdir -p msaber-back-${{ matrix.arch }}/doc/static
          cp -r msaber-back/dist msaber-back-${{ matrix.arch }}/dist
          cp -r msaber-back/etc msaber-back-${{ matrix.arch }}/etc
          cp -r msaber-back/doc/static msaber-back-${{ matrix.arch }}/doc/static

      - name: Upload Backend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact-backend-${{ matrix.arch }}
          path: msaber-back-${{ matrix.arch }}

  docker-setup:
    runs-on: ubuntu-latest
    needs: [ build-frontend, build-backend ]
    steps:
      - name: Checkout code Now Code
        uses: actions/checkout@v4
        with:
          ref: 'main'

      - name: Download Frontend Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: my-artifact-front-*
          merge-multiple: true
          path: msaber-front


      - run: ls -R msaber-front

      - name: Download Backend Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: my-artifact-backend-*
          merge-multiple: true
          path: msaber-back

      - run: ls -R msaber-back

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/media-saber:dev
          push: true