name: build-dev-j

on:
  workflow_dispatch:

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code Now Code
        uses: actions/checkout@v3
        with:
          ref: 'main'

      - name: Checkout code front end
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.REPOSITORY_FRONT }}
          path: './msaber-front'
          ref: 'main'
          token: ${{ secrets.PERSON_ACCESS_TOKEN }}

      - name: 修改非正式版本号
        run: |
          echo "DEV_$(date -d '+8 hours' +'%Y%m%d%H%M')" > version

      - name: Get version from file
        id: get_version
        run: |
          echo "version=$(cat version)" >> $GITHUB_ENV

      - name: Update front version in version.ts
        run: |
          echo "export const version = '${{ env.version }}';" > msaber-front/version.ts

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            msaber-front/package-lock.json

      - name: Build Frontend
        run: |
          cd msaber-front
          npm install
          npm run build

  build-backend-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code Now Code
        uses: actions/checkout@v3
        with:
          ref: 'main'

      - name: Checkout code back end
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.REPOSITORY_BACK }}
          path: './msaber-back'
          ref: 'main'
          token: ${{ secrets.PERSON_ACCESS_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.1'

      - name: Build for amd64
        run: |
          cd msaber-back
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a --trimpath -ldflags="-X 'github.com/xylplm/media-saber-back-end/internal/svc.sqlDebug=false' -X 'msaber-back/internal/config.Version=${{ env.version }}' -X 'msaber-back/internal/config.BuildDate=$(date)'" -o dist/linux/amd64/mediaSaber .
  

  build-backend-arm64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code back end
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.REPOSITORY_BACK }}
          path: './msaber-back'
          ref: 'main'
          token: ${{ secrets.PERSON_ACCESS_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.1'

      - name: Build for arm64
        run: |
          cd msaber-back
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -a --trimpath -ldflags="-X 'github.com/xylplm/media-saber-back-end/internal/svc.sqlDebug=false' -X 'msaber-back/internal/config.Version=${{ env.version }}' -X 'msaber-back/internal/config.BuildDate=$(date)'" -o dist/linux/arm64/mediaSaber .

  docker-setup:
    runs-on: ubuntu-latest
    needs: [ build-frontend, build-backend-amd64, build-backend-arm64 ]
    steps:
      - name: Checkout code Now Code
        uses: actions/checkout@v3
        with:
          ref: 'main'

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/media-saber:go-dev
          push: true