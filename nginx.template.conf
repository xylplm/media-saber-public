load_module modules/ngx_http_js_module.so;
user msaber;
worker_processes auto;
worker_cpu_affinity auto;

error_log /app/config/nginx/log/error.log warn;

events {
    worker_connections 1024;
}


http {

    include /etc/nginx/mime.types;
    client_max_body_size 200m;
    default_type application/octet-stream;

    # 设置缓存路径和缓存区大小
    proxy_cache_path /tmp levels=1:2 keys_zone=my_cache:10m max_size=100m inactive=60m use_temp_path=off;

    # 速率限制区域，用于防止滥用
    limit_req_zone $binary_remote_addr zone=m3u8_proxy:10m rate=10r/m;

    sendfile on;

    keepalive_timeout 3600;

    #log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    #                '$status $body_bytes_sent "$http_referer" '
     #               '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log /app/config/nginx/log/access.log main;

    
    #默认关闭访问日志
    access_log off;

    server {


        listen ${MS_PORT};
        listen [::]:${MS_PORT};
        server_name _; # serve all hostnames
        server_tokens off; # disable header "Server nginx"

        # gzip compression
        gzip on;
        gzip_comp_level 6;
        gzip_min_length 1100;
        gzip_buffers 16 8k;
        gzip_proxied any;
        gzip_types
            application/javascript
            application/json
            application/rss+xml
            application/x-javascript
            application/xml
            image/svg+xml
            text/css
            text/javascript
            text/js
            text/plain
            text/xml;

        location / {
            # 主目录
            expires off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            root /app/front;
            try_files $uri $uri/ /index.html =404;
            index index.html;
        }

        location ~* \.(js|css|ico|svg)$ {
            # 缓存根目录下的 JS、CSS、ICO 和 SVG 文件
            expires 30d;
            add_header Cache-Control "public";
            root /app/front;
        }

        location /assets {
            # 静态资源
            expires 30d;
            add_header Cache-Control "public";
            root /app/front;
        }

        location /static {
             # 静态资源
            expires 30d;
            add_header Cache-Control "public";
            root /app/config/data;
        }

        location ~* ^/(api/v1/eventMessage/event|ai/sse|ai/message|ai/v1/chat/completions) {

            # 针对 SSE (Server-Sent Events) 的特殊处理
            # 该路径用于处理长连接请求，保持连接不超时
            keepalive_timeout 0; # 永不超时

            # 针对 text/event-stream 请求永不超时
            proxy_pass http://backend_api;
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_cache off;
            proxy_redirect off;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;

            # 设置为长连接
            proxy_set_header Connection keep-alive;

            # 针对 SSE (Server-Sent Events)
            add_header Cache-Control no-cache;
            add_header Content-Type text/event-stream;

            # 增加以下超时设置为 24 小时
            proxy_read_timeout 86400s; # 读取超时时间
            proxy_send_timeout 86400s; # 发送超时时间
        }

        location /ai {
            # AI相关请求
            # 后端API
            proxy_pass http://backend_api;
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_cache off;
            proxy_redirect off;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
        }

        location /api {
            # 后端API
            proxy_pass http://backend_api;
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_cache off;
            proxy_redirect off;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
        }

        location /m3u8 {
            # 启用访问日志以监控滥用
            access_log /app/config/nginx/log/m3u8_access.log;

            # 速率限制，防止滥用
            limit_req zone=m3u8_proxy burst=5 nodelay;

            # 验证url参数：必须是http或https，且不为空，且以.m3u8结尾
            if ($arg_url = "") {
                return 400 "Missing url parameter";
            }
            if ($arg_url !~ ^https?://) {
                return 400 "Invalid url parameter";
            }
            if ($arg_url !~ \.m3u8$) {
                return 400 "URL must end with .m3u8";
            }

            # m3u8代理，用于防止跨域，地址通过url查询参数动态指定
            proxy_pass $arg_url;
            resolver 8.8.8.8 ipv6=off;
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_cache off;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;

            # 防止前端缓存 m3u8 文件，因为它是动态的
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";

            # CORS headers to prevent cross-domain issues
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";
            add_header Access-Control-Expose-Headers "Content-Length,Content-Range";

            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
    }

    upstream backend_api {
        # 后端API的地址和端口
        server 127.0.0.1:22698;
        # 可以添加更多后端服务器作为负载均衡
    }

    #加载自定义配置
    include /app/config/nginx/vhost/*.conf;


}
